# cloudbuild-prod.yaml

availableSecrets:
  secretManager:
    - versionName: "projects/$PROJECT_ID/secrets/DB_PASSWORD/versions/latest"
      env: "DB_PASSWORD"

substitutions:
  _SERVICE: 'picca-prod'
  _TF_ACTION: 'apply'

images:
  - "gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: UNSPECIFIED

steps:
  - id: 'guard-region'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION}"
        if [[ -z "${region}" || "${region}" == "unset" ]]; then
          echo "ERROR: _REGION must be set in the Cloud Build trigger (e.g., asia-northeast1)." 1>&2
          exit 1
        fi

  # 1. ユニットテスト
  - id: 'run-unit-tests'
    name: 'node:20'
    entrypoint: 'bash'
    secretEnv:
      - 'DB_PASSWORD'
    args:
      - '-c'
      - |
        echo "Running tests with DB_PASSWORD=$$DB_PASSWORD"
        npm ci && npm test -- --ci

  # 2. Docker ビルド＆プッシュ
  - id: 'build-and-push-image'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker build -t gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA .
        docker push gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA

  # 3. Cloud Run 本番デプロイ
  - id: 'deploy-to-cloud-run'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION}"
        service="${_SERVICE}"
        service_override="$(printenv SERVICE || true)"
        if [ -n "${service_override}" ]; then
          service="${service_override}"
        fi
        image_override="$(printenv IMAGE || true)"
        if [ -n "${image_override}" ]; then
          image="${image_override}"
        else
          image="gcr.io/${PROJECT_ID}/${service}:${SHORT_SHA}"
        fi

        gcloud run deploy "${service}" \
          --image "${image}" \
          --region "${region}" \
          --platform managed \
          --no-allow-unauthenticated \
          --set-secrets=DB_PASSWORD=DB_PASSWORD:latest \
          --quiet

  # 4. Terraform 初期化
  - id: 'write-backend-config'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        bucket="${_TF_BACKEND_BUCKET:-${TF_BACKEND_BUCKET:-}}"
        prefix="${_TF_BACKEND_PREFIX:-${TF_BACKEND_PREFIX:-terraform/state}}"
        impersonate_sa="${_TF_BACKEND_IMPERSONATE_SA:-${TF_BACKEND_IMPERSONATE_SA:-}}"

        if [[ -z "${bucket}" ]]; then
          echo "ERROR: Provide _TF_BACKEND_BUCKET (or legacy TF_BACKEND_BUCKET) in the trigger substitutions." 1>&2
          exit 1
        fi

        {
          printf 'bucket = "%s"\n' "${bucket}"
          printf 'prefix = "%s"\n' "${prefix}"
          if [[ -n "${impersonate_sa}" ]]; then
            printf 'impersonate_service_account = "%s"\n' "${impersonate_sa}"
          fi
        } > infra/backend.hcl

  - id: 'tf-init'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'terraform'
    args:
      - '-chdir=infra'
      - 'init'
      - '-backend-config=backend.hcl'

  # 5. Terraform apply
  - id: 'tf-apply'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'terraform'
    args:
      - '-chdir=infra'
      - 'apply'
      - '-var=project=${PROJECT_ID}'
      - '-var=region=${_REGION}'
      - '-auto-approve'


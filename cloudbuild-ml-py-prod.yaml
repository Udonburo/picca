# ===== Picca ML PY: prod build & deploy & smoke =====
# Substitutions: _REGION, _TAG_NAME, _MODEL_BUCKET
# Example: --substitutions="_REGION=YOUR_REGION,_TAG_NAME=v0.1.1,_MODEL_BUCKET=picca-models"

substitutions:
  _TAG_NAME: "v0.1.1"
  _MODEL_BUCKET: "picca-models"
  # _REGION: 'unset' ← この行は不要であれば削除してOKです

options:
  logging: CLOUD_LOGGING_ONLY

# 1) Build image from services/ml_py/Dockerfile
steps:
  - id: 'guard-region'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |-
        set -euo pipefail
        region="${_REGION}"
        if [[ -z "${region}" || "${region}" == "unset" ]]; then
          echo "ERROR: _REGION must be set in the Cloud Build trigger (e.g., asia-northeast1)." 1>&2
          exit 1
        fi

  - id: "docker build"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/picca-backend/picca-ml-py-prod:latest"
      - "-f"
      - "services/ml_py/Dockerfile"
      - "."
    env:
      - "DOCKER_BUILDKIT=1"

  - id: "docker push"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/picca-backend/picca-ml-py-prod:latest"

  # 2) Deploy to Cloud Run (inject MODEL_URI & SHA256, service account, resources)
  - id: "run deploy"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-lc"
      - |
        set -euo pipefail
        image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/picca-backend/picca-ml-py-prod:latest"
        model_uri="gs://${_MODEL_BUCKET}/models/dcv/${_TAG_NAME}/model.onnx"
        sha="$(gsutil cat gs://${_MODEL_BUCKET}/models/dcv/${_TAG_NAME}/model.onnx.sha256 | tr -d '\n\r')"
        echo "Deploying: ${image}"
        echo "MODEL_URI: ${model_uri}"
        echo "MODEL_SHA: ${sha}"
        gcloud run deploy picca-ml-py-prod \
          --region="${_REGION}" --platform=managed --quiet \
          --image="${image}" \
          --concurrency=4 --cpu=2 --memory=2Gi \
          --min-instances=1 --timeout=60 \
          --service-account="ml-py-prod-sa@${PROJECT_ID}.iam.gserviceaccount.com" \
          --set-env-vars="_MODEL_URI=${model_uri},_MODEL_SHA256=${sha},OMP_NUM_THREADS=2,PYTHONUNBUFFERED=1" \
          --allow-unauthenticated

  - id: "smoke"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -euo pipefail

        URL="$(gcloud run services describe picca-ml-py-prod --region "${_REGION}" --format='value(status.url)')"
        echo "Service URL: $$URL"

        # 少し待つ（直後の 404/502 回避）
        sleep 3

        # /healthz は任意
        curl -fsS "$$URL/healthz" >/dev/null || echo "no /healthz (ok)"

        # /readiness は必須。最大 10 回まで待つ
        for i in $(seq 1 10); do
          code="$(curl -s -o /dev/null -w '%{http_code}' "$$URL/readiness" || true)"
          echo "readiness try #$i -> HTTP $code"
          if [ "$code" = "200" ]; then
            break
          fi
          if [ "$i" -eq 10 ]; then
            echo "readiness did not become 200"
            gcloud run services logs read picca-ml-py-prod --region "${_REGION}" --limit 100 || true
            exit 1
          fi
          sleep 5
        done

        TOKEN="$(gcloud auth print-identity-token || true)"
        AUTH_HDR=()
        [ -n "$$TOKEN" ] && AUTH_HDR=(-H "Authorization: Bearer $$TOKEN")

        body='{"keypoints":[{"x":0.1,"y":0.2},{"x":0.1,"y":0.2},{"x":0.1,"y":0.2}],"fps":30}'
        for i in $(seq 1 5); do
          code="$(curl -s -o /dev/null -w '%{http_code}' "${AUTH_HDR[@]}" -H "Content-Type: application/json" \
            -X POST "$$URL/predict" --data-binary "$body" || true)"
          echo "predict try #$i -> HTTP $code"
          if [ "$code" = "200" ]; then
            echo "Smoke OK"
            exit 0
          fi
          [ "$i" -eq 5 ] && { echo "predict failed with HTTP $code"; curl -i "${AUTH_HDR[@]}" -H "Content-Type: application/json" \
            -X POST "$$URL/predict" --data-binary "$body" || true; exit 1; }
          sleep 4
        done

images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/picca-backend/picca-ml-py-prod:latest"

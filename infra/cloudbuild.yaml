availableSecrets:
  secretManager:
    - versionName: "projects/$PROJECT_ID/secrets/DB_PASSWORD/versions/latest"
      env: "DB_PASSWORD"

substitutions:
  _TF_ACTION: 'plan'
  _SERVICE: 'picca-stg'
  # ※ _REGION はトリガー（Substitutions）で必ず指定（例: asia-northeast1）
  # ※ _TF_BACKEND_BUCKET もトリガーで指定（例: picca-tfstate-${PROJECT_ID}）
  #    _TFSTATE_PREFIX は任意（未指定時は infra/state）

images:
  - "gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: UNSPECIFIED

steps:
  # 0. Guard: _REGION はトリガー必須
  - id: 'guard-region'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION}"
        if [[ -z "${region}" || "${region}" == "unset" ]]; then
          echo "ERROR: _REGION must be set in the Cloud Build trigger (e.g., asia-northeast1)." 1>&2
          exit 1
        fi

  # 1. unit tests
  - id: 'install-and-test'
    name: 'node:20'
    entrypoint: 'bash'
    secretEnv:
      - 'DB_PASSWORD'
    args:
      - -c
      - |
        echo "Installing dependencies and running tests..."
        npm ci && npm test -- --ci

  # 2. Docker イメージをビルド＆プッシュ
  - id: 'build-and-push-image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA', '.']

  - id: 'push-image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA']

  # 3. Cloud Run へデプロイ
  - id: 'deploy-to-cloud-run'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION}"
        service="${_SERVICE}"
        service_override="$(printenv SERVICE || true)"
        if [ -n "${service_override}" ]; then
          service="${service_override}"
        fi
        image_override="$(printenv IMAGE || true)"
        if [ -n "${image_override}" ]; then
          image="${image_override}"
        else
          image="gcr.io/$PROJECT_ID/${service}:$SHORT_SHA"
        fi

        gcloud run deploy "${service}" \
          --image "${image}" \
          --region "${region}" \
          --platform managed \
          --set-secrets=DB_PASSWORD=DB_PASSWORD:latest,API_KEY=API_KEY:latest \
          --allow-unauthenticated \
          --quiet

  # 3.5 Terraform 用 backend.hcl を生成（_TF_BACKEND_BUCKET 必須／レガシーも許容）
  - id: 'gen-backend-hcl'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        # Primary: _TF_BACKEND_BUCKET（ユーザー定義）
        # Fallback: TF_BACKEND_BUCKET（レガシー環境変数）
        BUCKET="${_TF_BACKEND_BUCKET:-${TF_BACKEND_BUCKET:-}}"
        if [[ -z "${BUCKET}" ]]; then
          echo "ERROR: Provide _TF_BACKEND_BUCKET in trigger substitutions, or export TF_BACKEND_BUCKET in the environment." 1>&2
          exit 1
        fi
        # プレフィクスは _TFSTATE_PREFIX を正とし、無ければ TFSTATE_PREFIX、デフォルト infra/state
        PREFIX="${_TFSTATE_PREFIX:-${TFSTATE_PREFIX:-infra/state}}"
        # Cloud Build の置換を避けるため $$ でエスケープ（実行時に $ に戻る）
        printf 'bucket = "%s"\nprefix = "%s"\n' "$$BUCKET" "$$PREFIX" > infra/backend.hcl
        echo "[ok] wrote infra/backend.hcl -> bucket=${BUCKET}, prefix=${PREFIX}"

  # 4. Terraform 初期化
  - id: 'tf-init'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'terraform'
    args: ['-chdir=infra', 'init', '-backend-config=backend.hcl']

  # 5. Terraform Plan
  - id: 'tf-plan'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'terraform'
    args:
      - '-chdir=infra'
      - 'plan'
      - '-no-color'
      - '-input=false'
      - '-out=plan.tfout'
      - '-var=project=${PROJECT_ID}'
      - '-var=region=${_REGION}'

availableSecrets:
  secretManager:
    - versionName: "projects/$PROJECT_ID/secrets/DB_PASSWORD/versions/latest"
      env: "DB_PASSWORD"

substitutions:
  _TF_ACTION: 'plan'       # plan|apply|skip（skip なら IaC を飛ばす）
  _SERVICE: 'picca-stg'    # デフォルトサービス名（SERVICE/IMAGE env で上書き可）

images:
  - "gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: UNSPECIFIED

steps:
  # 0) _REGION は必須
  - id: 'guard-region'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION:-}"
        if [[ -z "${region}" || "${region}" == "unset" ]]; then
          echo "ERROR: _REGION must be set in the Cloud Build trigger (e.g., asia-northeast1)." 1>&2
          exit 1
        fi

  # 1) ユニットテスト
  - id: 'install-and-test'
    name: 'node:20'
    entrypoint: 'bash'
    secretEnv: ['DB_PASSWORD']
    args:
      - -c
      - |
        set -euo pipefail
        npm ci
        npm test -- --ci

  # 2) Docker build & push
  - id: 'build-image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA', '.']

  - id: 'push-image'
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/$_SERVICE:$SHORT_SHA']

  # 3) Cloud Run deploy
  - id: 'deploy-to-cloud-run'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        region="${_REGION}"
        service="${_SERVICE}"
        if [[ -n "${SERVICE:-}" ]]; then service="${SERVICE}"; fi
        if [[ -n "${IMAGE:-}" ]];  then image="${IMAGE}"; else image="gcr.io/$PROJECT_ID/${service}:$SHORT_SHA"; fi

        gcloud run deploy "${service}" \
          --image "${image}" \
          --region "${region}" \
          --platform managed \
          --set-secrets=DB_PASSWORD=DB_PASSWORD:latest,API_KEY=API_KEY:latest \
          --allow-unauthenticated \
          --quiet

  # 3.5) Terraform backend.hcl 生成（Cloud Build 置換を回避するため $$ を使用）
  - id: 'gen-backend-hcl'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        BUCKET="${_TF_BACKEND_BUCKET:-${TF_BACKEND_BUCKET:-}}"
        if [[ -z "$$BUCKET" ]]; then
          echo "ERROR: Provide _TF_BACKEND_BUCKET in trigger substitutions, or export TF_BACKEND_BUCKET." 1>&2
          exit 1
        fi
        PREFIX="${_TFSTATE_PREFIX:-${TFSTATE_PREFIX:-infra/state}}"
        printf 'bucket = "%s"\nprefix = "%s"\n' "$$BUCKET" "$$PREFIX" > infra/backend.hcl
        echo "[ok] wrote infra/backend.hcl -> bucket=$$BUCKET, prefix=$$PREFIX"

  # 4) Terraform init（_TF_ACTION=skip のときはスキップ）
  - id: 'tf-init'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        [[ "${_TF_ACTION:-plan}" =~ ^(plan|apply)$ ]] || { echo "[skip] tf-init"; exit 0; }
        terraform -chdir=infra init -backend-config=backend.hcl

  # 5) Terraform plan（_TF_ACTION=apply でも plan を作成）
  - id: 'tf-plan'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        [[ "${_TF_ACTION:-plan}" =~ ^(plan|apply)$ ]] || { echo "[skip] tf-plan"; exit 0; }
        terraform -chdir=infra plan -no-color -input=false -out=plan.tfout \
          -var="project=${PROJECT_ID}" -var="region=${_REGION}"

  # 6) Terraform apply（_TF_ACTION=apply のときのみ実行）
  - id: 'tf-apply'
    name: 'hashicorp/terraform:1.8'
    entrypoint: 'bash'
    args:
      - -lc
      - |
        set -euo pipefail
        [[ "${_TF_ACTION:-plan}" == "apply" ]] || { echo "[skip] tf-apply"; exit 0; }
        terraform -chdir=infra apply -auto-approve plan.tfout
